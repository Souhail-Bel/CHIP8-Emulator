#ifndef CHIP8_H_
#define CHIP8_H_

#include <stdint.h>

// MEMORY
#define MEMORY_SIZE 	0x1000
#define FONT_OFFSET 	0x0
#define PROGRAM_OFFSET 	0x200

// Registers
#define V_REGS_NUM 		16
#define STACK_NEST 		16

// PERIPHERALS
#define KEY_NUMS 		16

// Display
#define DISP_W 			64
#define DISP_H 			32
#define DISP_S 			(DISP_H*DISP_W)
#define FONT_SIZE 		(5*KEY_NUMS)

typedef uint8_t byte;
typedef uint16_t word;

static byte font[FONT_SIZE] = {
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

typedef struct Chip8{
	byte memory[MEMORY_SIZE];
	
	word PC;
	word I;
	byte V[V_REGS_NUM];
	word stack[STACK_NEST];
	byte stack_pointer;
	
	byte timer_sound;
	byte timer_delay;
	unsigned short flag_sound;
	
	byte gfx[DISP_S];
	unsigned short flag_draw;
	
	byte keys[KEY_NUMS];
} Chip8;

extern Chip8 g_chip8;

void initCHIP(void);
void loadROM(const char* rom);
void loadSTATE(const char* state_name);
void dumpSTATE(void);
void cycle(void);

#endif
